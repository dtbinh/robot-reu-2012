/* Auto-generated by genmsg_cpp for file /home/robotics/rosbots/irobot_nav/srv/Status.srv */
#ifndef IROBOT_NAV_SERVICE_STATUS_H
#define IROBOT_NAV_SERVICE_STATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace irobot_nav
{
template <class ContainerAllocator>
struct StatusRequest_ {
  typedef StatusRequest_<ContainerAllocator> Type;

  StatusRequest_()
  : status()
  {
  }

  StatusRequest_(const ContainerAllocator& _alloc)
  : status(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  status;


private:
  static const char* __s_getDataType_() { return "irobot_nav/StatusRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "4fe5af303955c287688e7347e9b00278"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "ec61c102682182b7da93e14e53536e5d"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string status\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, status);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, status);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(status);
    return size;
  }

  typedef boost::shared_ptr< ::irobot_nav::StatusRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::irobot_nav::StatusRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StatusRequest
typedef  ::irobot_nav::StatusRequest_<std::allocator<void> > StatusRequest;

typedef boost::shared_ptr< ::irobot_nav::StatusRequest> StatusRequestPtr;
typedef boost::shared_ptr< ::irobot_nav::StatusRequest const> StatusRequestConstPtr;


template <class ContainerAllocator>
struct StatusResponse_ {
  typedef StatusResponse_<ContainerAllocator> Type;

  StatusResponse_()
  : acknowledgment()
  {
  }

  StatusResponse_(const ContainerAllocator& _alloc)
  : acknowledgment(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _acknowledgment_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  acknowledgment;


private:
  static const char* __s_getDataType_() { return "irobot_nav/StatusResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "798ca7e4ab94c05dcdd96b9710885b00"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "ec61c102682182b7da93e14e53536e5d"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string acknowledgment\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, acknowledgment);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, acknowledgment);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(acknowledgment);
    return size;
  }

  typedef boost::shared_ptr< ::irobot_nav::StatusResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::irobot_nav::StatusResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StatusResponse
typedef  ::irobot_nav::StatusResponse_<std::allocator<void> > StatusResponse;

typedef boost::shared_ptr< ::irobot_nav::StatusResponse> StatusResponsePtr;
typedef boost::shared_ptr< ::irobot_nav::StatusResponse const> StatusResponseConstPtr;

struct Status
{

typedef StatusRequest Request;
typedef StatusResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Status
} // namespace irobot_nav

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::irobot_nav::StatusRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::irobot_nav::StatusRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::irobot_nav::StatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4fe5af303955c287688e7347e9b00278";
  }

  static const char* value(const  ::irobot_nav::StatusRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4fe5af303955c287ULL;
  static const uint64_t static_value2 = 0x688e7347e9b00278ULL;
};

template<class ContainerAllocator>
struct DataType< ::irobot_nav::StatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "irobot_nav/StatusRequest";
  }

  static const char* value(const  ::irobot_nav::StatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::irobot_nav::StatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string status\n\
\n\
";
  }

  static const char* value(const  ::irobot_nav::StatusRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::irobot_nav::StatusResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::irobot_nav::StatusResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::irobot_nav::StatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "798ca7e4ab94c05dcdd96b9710885b00";
  }

  static const char* value(const  ::irobot_nav::StatusResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x798ca7e4ab94c05dULL;
  static const uint64_t static_value2 = 0xcdd96b9710885b00ULL;
};

template<class ContainerAllocator>
struct DataType< ::irobot_nav::StatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "irobot_nav/StatusResponse";
  }

  static const char* value(const  ::irobot_nav::StatusResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::irobot_nav::StatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string acknowledgment\n\
\n\
\n\
";
  }

  static const char* value(const  ::irobot_nav::StatusResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::irobot_nav::StatusRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.status);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StatusRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::irobot_nav::StatusResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.acknowledgment);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StatusResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<irobot_nav::Status> {
  static const char* value() 
  {
    return "ec61c102682182b7da93e14e53536e5d";
  }

  static const char* value(const irobot_nav::Status&) { return value(); } 
};

template<>
struct DataType<irobot_nav::Status> {
  static const char* value() 
  {
    return "irobot_nav/Status";
  }

  static const char* value(const irobot_nav::Status&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<irobot_nav::StatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ec61c102682182b7da93e14e53536e5d";
  }

  static const char* value(const irobot_nav::StatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<irobot_nav::StatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "irobot_nav/Status";
  }

  static const char* value(const irobot_nav::StatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<irobot_nav::StatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ec61c102682182b7da93e14e53536e5d";
  }

  static const char* value(const irobot_nav::StatusResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<irobot_nav::StatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "irobot_nav/Status";
  }

  static const char* value(const irobot_nav::StatusResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // IROBOT_NAV_SERVICE_STATUS_H

